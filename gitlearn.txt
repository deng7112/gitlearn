HEAD表示最新版本
git init 		初始化当前目录为一个仓库
git add ‘文件名’    	添加
git status              查看情况（以添加未提交的队列）
git diff HEAD -- '文件名'  		查看变动了什么
git commit -m '备注信息'	提交到仓库
git log --pretty==oneline	一条线显示历史版本
git reset --hard HEAD^		回到上一个版本
git reset --hard '版本号前面几位'	回到某一个版本
git reflog 		 前面的命令记录
git checkout -- '文件名'	把工作区的修改撤销，
git reset HEAD '文件名'		把暂存区的修改撤销，重新回到工作区
rm '文件名'	删除一个文件之后有两个选择
	1。彻底删除	git rm         git commit -m '备注'
	2。恢复		git checkout -- '文件名'	其实就是用版本库的文件替代工作区文件
ssh-keygen -t rsa -C "邮箱地址"		创建sshkey
.ssh目录，里面有id_rsa和id_rsa.pub两个文件，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥
git remote add origin "仓库地址"     关联一个远程仓库
git push -u origin master            第一次推送master分支的所有内容
git push origin master		     之后可以直接这样推送最新版本
git clone "仓库地址"		     克隆一个远程仓库到本地

git checkout -b "分支名"	     创建并切换一个分支	
=    git branch "分支名"  +  git checkout "分支名"
git switch -c "分支名"		     创建并切换一个分支
=    git branch "分支名"  +  git switch "分支名"

git branch		查看当前分支		-d   删除某分支
git checkout "分支名"	切换到‘’分支
git merge "分支名"	合并某分支到当前分支
git log --graph --pretty=oneline     查看分支合并图
git stash		把当前工作区储藏起来
	list		列出储藏内容的列表
	apply 		恢复储藏内容             drop   删除储藏
	pop 				 恢复并删除储藏内容
git remote				 查看远程库信息
git remote -v 				 查看远程库地址
git clone '地址'  			 克隆/下载
git checkout -b dev origin/dev     	 创建远程库的dev分支


 查看远程库信息，使用git remote -v；
 本地新建的分支如果不推送到远程，对其他人就是不可见的；
 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

git log --graph --pretty=oneline --abbrev-commit	简洁地显示分支合并图
git tag <name>				 为当前commit打标签
git tag					 查看标签
git <name> <commit>			 给某个提交版本打标签
git show <v1.0>				 查看标签信息
git tag -a <name> -m "说明" <commit>     创建带有说明的标签，-a代表标签，-m代表说明
git tag -d <name>			 删除某个标签
git push origin <name>			 推送某个标签到远程
git push origin --tags 			 推送所有标签到远程
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
git tag -d v0.9
然后，从远程删除。删除命令也是push，但是格式如下：
git push origin :refs/tags/v0.9






